# generated by datamodel-codegen:
#   filename:  runtime.json
#   timestamp: 2025-10-17T19:32:29+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Literal, Optional, Union

from pydantic import AwareDatetime, BaseModel, Field


class AVClip(BaseModel):
    type: Annotated[Literal['av_clip'], Field(title='Type')] = 'av_clip'


class Audio(BaseModel):
    type: Annotated[Literal['audio'], Field(title='Type')] = 'audio'


class BasePadType(BaseModel):
    pass


class BoundingBox(BaseModel):
    type: Annotated[Literal['bounding_box'], Field(title='Type')] = 'bounding_box'


class ContentType(Enum):
    text = 'text'
    image = 'image'
    audio = 'audio'
    video = 'video'


class ContextMessageContentItemAudio(BaseModel):
    duration: Annotated[float, Field(title='Duration')]
    transcription: Annotated[Optional[str], Field(title='Transcription')] = None
    handle: Annotated[str, Field(title='Handle')]
    start_timestamp: Annotated[Optional[float], Field(title='Start Timestamp')] = None


class ContextMessageContentItemImage(BaseModel):
    width: Annotated[int, Field(title='Width')]
    height: Annotated[int, Field(title='Height')]
    handle: Annotated[str, Field(title='Handle')]
    timestamp: Annotated[Optional[float], Field(title='Timestamp')] = None


class ContextMessageContentItemVideo(BaseModel):
    width: Annotated[int, Field(title='Width')]
    height: Annotated[int, Field(title='Height')]
    duration: Annotated[float, Field(title='Duration')]
    handle: Annotated[str, Field(title='Handle')]
    frame_count: Annotated[int, Field(title='Frame Count')]
    start_timestamp: Annotated[Optional[float], Field(title='Start Timestamp')] = None


class ContextMessageRoleEnum(Enum):
    user = 'user'
    assistant = 'assistant'
    system = 'system'
    tool = 'tool'


class Point(BaseModel):
    type: Annotated[Literal['point'], Field(title='Type')] = 'point'


class PublicSecret(BaseModel):
    updated_at: Annotated[AwareDatetime, Field(title='Updated At')]
    created_at: Annotated[AwareDatetime, Field(title='Created At')]
    id: Annotated[str, Field(title='Id')]
    name: Annotated[str, Field(title='Name')]


class RuntimeEventPayloadLogItem(BaseModel):
    message: Annotated[str, Field(title='Message')]
    level: Annotated[str, Field(title='Level')]
    timestamp: Annotated[str, Field(title='Timestamp')]
    node: Annotated[Optional[str], Field(title='Node')] = None
    subgraph: Annotated[Optional[str], Field(title='Subgraph')] = None
    pad: Annotated[Optional[str], Field(title='Pad')] = None


class RuntimeEventPayloadLogs(BaseModel):
    type: Annotated[Literal['logs'], Field(title='Type')] = 'logs'
    items: Annotated[list[RuntimeEventPayloadLogItem], Field(title='Items')]


class RuntimeRequestPayloadGetListItems(BaseModel):
    type: Annotated[Literal['get_list_items'], Field(title='Type')] = 'get_list_items'
    node_id: Annotated[str, Field(title='Node Id')]
    pad_id: Annotated[str, Field(title='Pad Id')]


class RuntimeRequestPayloadGetValue(BaseModel):
    type: Annotated[Literal['get_value'], Field(title='Type')] = 'get_value'
    node_id: Annotated[str, Field(title='Node Id')]
    pad_id: Annotated[str, Field(title='Pad Id')]


class RuntimeRequestPayloadLockPublisher(BaseModel):
    type: Annotated[Literal['lock_publisher'], Field(title='Type')] = 'lock_publisher'
    publish_node: Annotated[str, Field(title='Publish Node')]


class RuntimeRequestPayloadPushValue(BaseModel):
    type: Annotated[Literal['push_value'], Field(title='Type')] = 'push_value'
    value: Annotated[Optional[Any], Field(title='Value')] = None
    node_id: Annotated[str, Field(title='Node Id')]
    pad_id: Annotated[str, Field(title='Pad Id')]


class RuntimeResponsePayloadLockPublisher(BaseModel):
    type: Annotated[Literal['lock_publisher'], Field(title='Type')] = 'lock_publisher'
    success: Annotated[bool, Field(title='Success')]


class RuntimeResponsePayloadPushValue(BaseModel):
    type: Annotated[Literal['push_value'], Field(title='Type')] = 'push_value'


class TextStream(BaseModel):
    type: Annotated[Literal['text_stream'], Field(title='Type')] = 'text_stream'


class Trigger(BaseModel):
    type: Annotated[Literal['trigger'], Field(title='Type')] = 'trigger'


class Video(BaseModel):
    type: Annotated[Literal['video'], Field(title='Type')] = 'video'


class GabberCoreTypesClientAudioClip(BaseModel):
    type: Annotated[Literal['audio_clip'], Field(title='Type')] = 'audio_clip'
    transcription: Annotated[Optional[str], Field(title='Transcription')] = None
    duration: Annotated[float, Field(title='Duration')]


class GabberCoreTypesClientBoolean(BaseModel):
    type: Annotated[Literal['boolean'], Field(title='Type')] = 'boolean'
    value: Annotated[bool, Field(title='Value')]


class GabberCoreTypesClientContextMessageRole(BaseModel):
    type: Annotated[Literal['context_message_role'], Field(title='Type')] = (
        'context_message_role'
    )
    value: ContextMessageRoleEnum


class GabberCoreTypesClientEnum(BaseModel):
    type: Annotated[Literal['enum'], Field(title='Type')] = 'enum'
    value: Annotated[str, Field(title='Value')]


class GabberCoreTypesClientFloat(BaseModel):
    type: Annotated[Literal['float'], Field(title='Type')] = 'float'
    value: Annotated[float, Field(title='Value')]


class GabberCoreTypesClientInteger(BaseModel):
    type: Annotated[Literal['integer'], Field(title='Type')] = 'integer'
    value: Annotated[int, Field(title='Value')]


class GabberCoreTypesClientNodeReference(BaseModel):
    type: Annotated[Literal['node_reference'], Field(title='Type')] = 'node_reference'
    node_id: Annotated[str, Field(title='Node Id')]


class GabberCoreTypesClientObject(BaseModel):
    type: Annotated[Literal['object'], Field(title='Type')] = 'object'
    value: Annotated[dict[str, Any], Field(title='Value')]


class GabberCoreTypesClientSecret(BaseModel):
    type: Annotated[Literal['secret'], Field(title='Type')] = 'secret'
    secret_id: Annotated[str, Field(title='Secret Id')]
    name: Annotated[str, Field(title='Name')]


class GabberCoreTypesClientString(BaseModel):
    type: Annotated[Literal['string'], Field(title='Type')] = 'string'
    value: Annotated[str, Field(title='Value')]


class GabberCoreTypesClientVideoClip(BaseModel):
    type: Annotated[Literal['video_clip'], Field(title='Type')] = 'video_clip'
    duration: Annotated[float, Field(title='Duration')]
    frame_count: Annotated[int, Field(title='Frame Count')]


class GabberCoreTypesPadConstraintsAudioClip(BaseModel):
    type: Annotated[Literal['audio_clip'], Field(title='Type')] = 'audio_clip'


class GabberCoreTypesPadConstraintsBoolean(BaseModel):
    type: Annotated[Literal['boolean'], Field(title='Type')] = 'boolean'


class GabberCoreTypesPadConstraintsContextMessage(BaseModel):
    type: Annotated[Literal['context_message'], Field(title='Type')] = 'context_message'


class GabberCoreTypesPadConstraintsContextMessageRole(BaseModel):
    type: Annotated[Literal['context_message_role'], Field(title='Type')] = (
        'context_message_role'
    )


class GabberCoreTypesPadConstraintsEnum(BaseModel):
    type: Annotated[Literal['enum'], Field(title='Type')] = 'enum'
    options: Annotated[Optional[list[str]], Field(title='Options')] = None


class GabberCoreTypesPadConstraintsFloat(BaseModel):
    type: Annotated[Literal['float'], Field(title='Type')] = 'float'
    maximum: Annotated[Optional[float], Field(title='Maximum')] = None
    minimum: Annotated[Optional[float], Field(title='Minimum')] = None


class GabberCoreTypesPadConstraintsInteger(BaseModel):
    type: Annotated[Literal['integer'], Field(title='Type')] = 'integer'
    maximum: Annotated[Optional[int], Field(title='Maximum')] = None
    minimum: Annotated[Optional[int], Field(title='Minimum')] = None


class GabberCoreTypesPadConstraintsList(BaseModel):
    type: Annotated[Literal['list'], Field(title='Type')] = 'list'
    max_length: Annotated[Optional[int], Field(title='Max Length')] = None
    item_type_constraints: Annotated[
        Optional[list[BasePadType]], Field(title='Item Type Constraints')
    ] = None


class GabberCoreTypesPadConstraintsNodeReference(BaseModel):
    type: Annotated[Literal['node_reference'], Field(title='Type')] = 'node_reference'
    node_types: Annotated[list[str], Field(title='Node Types')]


class GabberCoreTypesPadConstraintsObject(BaseModel):
    type: Annotated[Literal['object'], Field(title='Type')] = 'object'
    object_schema: Annotated[Optional[dict[str, Any]], Field(title='Object Schema')] = (
        None
    )


class GabberCoreTypesPadConstraintsSchema(BaseModel):
    type: Annotated[Literal['schema'], Field(title='Type')] = 'schema'


class GabberCoreTypesPadConstraintsSecret(BaseModel):
    type: Annotated[Literal['secret'], Field(title='Type')] = 'secret'
    options: Annotated[Optional[list[PublicSecret]], Field(title='Options')] = []


class GabberCoreTypesPadConstraintsString(BaseModel):
    type: Annotated[Literal['string'], Field(title='Type')] = 'string'
    max_length: Annotated[Optional[int], Field(title='Max Length')] = None
    min_length: Annotated[Optional[int], Field(title='Min Length')] = None


class GabberCoreTypesPadConstraintsVideoClip(BaseModel):
    type: Annotated[Literal['video_clip'], Field(title='Type')] = 'video_clip'


class ContextMessageContentItem(BaseModel):
    content_type: Annotated[ContentType, Field(title='Content Type')]
    text: Annotated[Optional[str], Field(title='Text')] = None
    image: Optional[ContextMessageContentItemImage] = None
    audio: Optional[ContextMessageContentItemAudio] = None
    video: Optional[ContextMessageContentItemVideo] = None


class RuntimeRequest(BaseModel):
    type: Annotated[Literal['request'], Field(title='Type')] = 'request'
    req_id: Annotated[str, Field(title='Req Id')]
    payload: Annotated[
        Union[
            RuntimeRequestPayloadPushValue,
            RuntimeRequestPayloadGetValue,
            RuntimeRequestPayloadGetListItems,
            RuntimeRequestPayloadLockPublisher,
        ],
        Field(
            description='Request to push data to a pad',
            discriminator='type',
            title='Payload',
        ),
    ]


class GabberCoreTypesClientContextMessage(BaseModel):
    type: Annotated[Literal['context_message'], Field(title='Type')] = 'context_message'
    role: GabberCoreTypesClientContextMessageRole
    content: Annotated[list[ContextMessageContentItem], Field(title='Content')]


class GabberCoreTypesClientSchema(BaseModel):
    type: Annotated[Literal['schema'], Field(title='Type')] = 'schema'
    properties: Annotated[
        dict[
            str,
            Union[
                GabberCoreTypesPadConstraintsString,
                GabberCoreTypesPadConstraintsInteger,
                GabberCoreTypesPadConstraintsFloat,
                GabberCoreTypesPadConstraintsBoolean,
                GabberCoreTypesPadConstraintsObject,
                GabberCoreTypesPadConstraintsList,
            ],
        ],
        Field(title='Properties'),
    ]
    required: Annotated[Optional[list[str]], Field(title='Required')] = None
    defaults: Annotated[Optional[dict[str, Any]], Field(title='Defaults')] = None


class ToolDefinition(BaseModel):
    type: Annotated[Literal['tool_definition'], Field(title='Type')] = 'tool_definition'
    name: Annotated[str, Field(title='Name')]
    description: Annotated[str, Field(title='Description')]
    parameters: Optional[GabberCoreTypesClientSchema] = None


class GabberCoreTypesClientList(BaseModel):
    type: Annotated[Literal['list'], Field(title='Type')] = 'list'
    count: Annotated[int, Field(title='Count')]
    items: Annotated[
        list[
            Optional[
                Union[
                    GabberCoreTypesClientString,
                    GabberCoreTypesClientInteger,
                    GabberCoreTypesClientFloat,
                    GabberCoreTypesClientBoolean,
                    Trigger,
                    GabberCoreTypesClientAudioClip,
                    GabberCoreTypesClientVideoClip,
                    GabberCoreTypesClientList,
                    GabberCoreTypesClientContextMessageRole,
                    GabberCoreTypesClientContextMessage,
                    GabberCoreTypesClientEnum,
                    GabberCoreTypesClientSecret,
                    GabberCoreTypesClientNodeReference,
                    ToolDefinition,
                    GabberCoreTypesClientSchema,
                    GabberCoreTypesClientObject,
                ]
            ]
        ],
        Field(title='Items'),
    ]


class RuntimeEventPayloadValue(BaseModel):
    type: Annotated[Literal['value'], Field(title='Type')] = 'value'
    value: Annotated[
        Optional[
            Union[
                GabberCoreTypesClientString,
                GabberCoreTypesClientInteger,
                GabberCoreTypesClientFloat,
                GabberCoreTypesClientBoolean,
                Trigger,
                GabberCoreTypesClientAudioClip,
                GabberCoreTypesClientVideoClip,
                GabberCoreTypesClientList,
                GabberCoreTypesClientContextMessageRole,
                GabberCoreTypesClientContextMessage,
                GabberCoreTypesClientEnum,
                GabberCoreTypesClientSecret,
                GabberCoreTypesClientNodeReference,
                ToolDefinition,
                GabberCoreTypesClientSchema,
                GabberCoreTypesClientObject,
            ]
        ],
        Field(title='Value'),
    ] = None
    node_id: Annotated[str, Field(title='Node Id')]
    pad_id: Annotated[str, Field(title='Pad Id')]


class RuntimeResponsePayloadGetListItems(BaseModel):
    type: Annotated[Literal['get_list_items'], Field(title='Type')] = 'get_list_items'
    items: Annotated[
        list[
            Optional[
                Union[
                    GabberCoreTypesClientString,
                    GabberCoreTypesClientInteger,
                    GabberCoreTypesClientFloat,
                    GabberCoreTypesClientBoolean,
                    Trigger,
                    GabberCoreTypesClientAudioClip,
                    GabberCoreTypesClientVideoClip,
                    GabberCoreTypesClientList,
                    GabberCoreTypesClientContextMessageRole,
                    GabberCoreTypesClientContextMessage,
                    GabberCoreTypesClientEnum,
                    GabberCoreTypesClientSecret,
                    GabberCoreTypesClientNodeReference,
                    ToolDefinition,
                    GabberCoreTypesClientSchema,
                    GabberCoreTypesClientObject,
                ]
            ]
        ],
        Field(title='Items'),
    ]


class RuntimeResponsePayloadGetValue(BaseModel):
    type: Annotated[Literal['get_value'], Field(title='Type')] = 'get_value'
    value: Annotated[
        Optional[
            Union[
                GabberCoreTypesClientString,
                GabberCoreTypesClientInteger,
                GabberCoreTypesClientFloat,
                GabberCoreTypesClientBoolean,
                Trigger,
                GabberCoreTypesClientAudioClip,
                GabberCoreTypesClientVideoClip,
                GabberCoreTypesClientList,
                GabberCoreTypesClientContextMessageRole,
                GabberCoreTypesClientContextMessage,
                GabberCoreTypesClientEnum,
                GabberCoreTypesClientSecret,
                GabberCoreTypesClientNodeReference,
                ToolDefinition,
                GabberCoreTypesClientSchema,
                GabberCoreTypesClientObject,
            ]
        ],
        Field(title='Value'),
    ] = None


class RuntimeEvent(BaseModel):
    type: Annotated[Literal['event'], Field(title='Type')] = 'event'
    payload: Annotated[
        Union[RuntimeEventPayloadValue, RuntimeEventPayloadLogs],
        Field(
            description='Payload for the runtime event',
            discriminator='type',
            title='Payload',
        ),
    ]


class RuntimeResponse(BaseModel):
    type: Annotated[Literal['complete'], Field(title='Type')] = 'complete'
    req_id: Annotated[str, Field(title='Req Id')]
    error: Annotated[Optional[str], Field(title='Error')] = None
    payload: Annotated[
        Optional[
            Union[
                RuntimeResponsePayloadPushValue,
                RuntimeResponsePayloadGetValue,
                RuntimeResponsePayloadGetListItems,
                RuntimeResponsePayloadLockPublisher,
            ]
        ],
        Field(title='Payload'),
    ] = None


class DummyType(BaseModel):
    req: RuntimeRequest
    runtime_request_payload: Annotated[
        Union[
            RuntimeRequestPayloadPushValue,
            RuntimeRequestPayloadGetValue,
            RuntimeRequestPayloadGetListItems,
            RuntimeRequestPayloadLockPublisher,
        ],
        Field(
            description='Request to push data to a pad',
            discriminator='type',
            title='Runtime Request Payload',
        ),
    ]
    resp: RuntimeResponse
    runtime_response_payload: Annotated[
        Union[
            RuntimeResponsePayloadPushValue,
            RuntimeResponsePayloadGetValue,
            RuntimeResponsePayloadGetListItems,
            RuntimeResponsePayloadLockPublisher,
        ],
        Field(
            description='Payload for the runtime request complete',
            discriminator='type',
            title='Runtime Response Payload',
        ),
    ]
    ev: RuntimeEvent
    runtime_event_payload: Annotated[
        Union[RuntimeEventPayloadValue, RuntimeEventPayloadLogs],
        Field(
            description='Payload for the runtime event',
            discriminator='type',
            title='Runtime Event Payload',
        ),
    ]
    pad_value: Annotated[
        Optional[
            Union[
                GabberCoreTypesClientString,
                GabberCoreTypesClientInteger,
                GabberCoreTypesClientFloat,
                GabberCoreTypesClientBoolean,
                Trigger,
                GabberCoreTypesClientAudioClip,
                GabberCoreTypesClientVideoClip,
                GabberCoreTypesClientList,
                GabberCoreTypesClientContextMessageRole,
                GabberCoreTypesClientContextMessage,
                GabberCoreTypesClientEnum,
                GabberCoreTypesClientSecret,
                GabberCoreTypesClientNodeReference,
                ToolDefinition,
                GabberCoreTypesClientSchema,
                GabberCoreTypesClientObject,
            ]
        ],
        Field(title='Pad Value'),
    ] = None
    pad_constraint: Annotated[
        Union[
            GabberCoreTypesPadConstraintsString,
            GabberCoreTypesPadConstraintsInteger,
            GabberCoreTypesPadConstraintsFloat,
            GabberCoreTypesPadConstraintsBoolean,
            GabberCoreTypesPadConstraintsEnum,
            GabberCoreTypesPadConstraintsSecret,
            BoundingBox,
            Point,
            Audio,
            Video,
            Trigger,
            GabberCoreTypesPadConstraintsAudioClip,
            GabberCoreTypesPadConstraintsVideoClip,
            AVClip,
            TextStream,
            GabberCoreTypesPadConstraintsContextMessage,
            GabberCoreTypesPadConstraintsContextMessageRole,
            GabberCoreTypesPadConstraintsList,
            GabberCoreTypesPadConstraintsSchema,
            GabberCoreTypesPadConstraintsObject,
            GabberCoreTypesPadConstraintsNodeReference,
        ],
        Field(discriminator='type', title='Pad Constraint'),
    ]
    log_item: RuntimeEventPayloadLogItem


GabberCoreTypesClientList.model_rebuild()
