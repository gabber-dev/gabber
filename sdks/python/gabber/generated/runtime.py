# generated by datamodel-codegen:
#   filename:  runtime.json
#   timestamp: 2025-10-15T18:30:17+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Literal, Optional, Union

from pydantic import BaseModel, Field, RootModel


class PadValueAudioClip(BaseModel):
    type: Annotated[Literal['audio_clip'], Field(title='Type')] = 'audio_clip'
    transcript: Annotated[str, Field(title='Transcript')]
    duration: Annotated[float, Field(title='Duration')]


class PadValueBoolean(BaseModel):
    type: Annotated[Literal['boolean'], Field(title='Type')] = 'boolean'
    value: Annotated[bool, Field(title='Value')]


class ContentType(Enum):
    text = 'text'
    image = 'image'
    audio = 'audio'
    video = 'video'


class PadValueContextMessageContentItemAudio(BaseModel):
    duration: Annotated[float, Field(title='Duration')]
    transcription: Annotated[Optional[str], Field(title='Transcription')] = None
    handle: Annotated[str, Field(title='Handle')]


class PadValueContextMessageContentItemImage(BaseModel):
    width: Annotated[int, Field(title='Width')]
    height: Annotated[int, Field(title='Height')]
    handle: Annotated[str, Field(title='Handle')]


class PadValueContextMessageContentItemVideo(BaseModel):
    width: Annotated[int, Field(title='Width')]
    height: Annotated[int, Field(title='Height')]
    duration: Annotated[float, Field(title='Duration')]
    handle: Annotated[str, Field(title='Handle')]


class PadValueFloat(BaseModel):
    type: Annotated[Literal['float'], Field(title='Type')] = 'float'
    value: Annotated[float, Field(title='Value')]


class PadValueInteger(BaseModel):
    type: Annotated[Literal['integer'], Field(title='Type')] = 'integer'
    value: Annotated[int, Field(title='Value')]


class PadValueList(BaseModel):
    type: Annotated[Literal['list'], Field(title='Type')] = 'list'
    count: Annotated[int, Field(title='Count')]
    items: Annotated[list, Field(title='Items')]


class PadValueString(BaseModel):
    type: Annotated[Literal['string'], Field(title='Type')] = 'string'
    value: Annotated[str, Field(title='Value')]


class PadValueTrigger(BaseModel):
    type: Annotated[Literal['trigger'], Field(title='Type')] = 'trigger'


class PadValueVideoClip(BaseModel):
    type: Annotated[Literal['video_clip'], Field(title='Type')] = 'video_clip'
    duration: Annotated[float, Field(title='Duration')]


class RuntimeEventPayloadLogItem(BaseModel):
    message: Annotated[str, Field(title='Message')]
    level: Annotated[str, Field(title='Level')]
    timestamp: Annotated[str, Field(title='Timestamp')]
    node: Annotated[Optional[str], Field(title='Node')] = None
    subgraph: Annotated[Optional[str], Field(title='Subgraph')] = None
    pad: Annotated[Optional[str], Field(title='Pad')] = None


class RuntimeEventPayloadLogs(BaseModel):
    type: Annotated[Literal['logs'], Field(title='Type')] = 'logs'
    items: Annotated[list[RuntimeEventPayloadLogItem], Field(title='Items')]


class RuntimeRequestPayloadGetListItems(BaseModel):
    type: Annotated[Literal['get_list_items'], Field(title='Type')] = 'get_list_items'
    node_id: Annotated[str, Field(title='Node Id')]
    pad_id: Annotated[str, Field(title='Pad Id')]


class RuntimeRequestPayloadGetValue(BaseModel):
    type: Annotated[Literal['get_value'], Field(title='Type')] = 'get_value'
    node_id: Annotated[str, Field(title='Node Id')]
    pad_id: Annotated[str, Field(title='Pad Id')]


class RuntimeRequestPayloadLockPublisher(BaseModel):
    type: Annotated[Literal['lock_publisher'], Field(title='Type')] = 'lock_publisher'
    publish_node: Annotated[str, Field(title='Publish Node')]


class RuntimeRequestPayloadPushValue(BaseModel):
    type: Annotated[Literal['push_value'], Field(title='Type')] = 'push_value'
    value: Annotated[Optional[Any], Field(title='Value')] = None
    node_id: Annotated[str, Field(title='Node Id')]
    pad_id: Annotated[str, Field(title='Pad Id')]


class RuntimeResponsePayloadLockPublisher(BaseModel):
    type: Annotated[Literal['lock_publisher'], Field(title='Type')] = 'lock_publisher'
    success: Annotated[bool, Field(title='Success')]


class RuntimeResponsePayloadPushValue(BaseModel):
    type: Annotated[Literal['push_value'], Field(title='Type')] = 'push_value'


class PadValueContextMessageContentItem(BaseModel):
    type: Annotated[Literal['context_message_content'], Field(title='Type')] = (
        'context_message_content'
    )
    content_type: Annotated[ContentType, Field(title='Content Type')]
    text: Annotated[Optional[str], Field(title='Text')] = None
    image: Optional[PadValueContextMessageContentItemImage] = None
    audio: Optional[PadValueContextMessageContentItemAudio] = None
    video: Optional[PadValueContextMessageContentItemVideo] = None


class RuntimeRequest(BaseModel):
    type: Annotated[Literal['request'], Field(title='Type')] = 'request'
    req_id: Annotated[str, Field(title='Req Id')]
    payload: Annotated[
        Union[
            RuntimeRequestPayloadPushValue,
            RuntimeRequestPayloadGetValue,
            RuntimeRequestPayloadGetListItems,
            RuntimeRequestPayloadLockPublisher,
        ],
        Field(
            description='Request to push data to a pad',
            discriminator='type',
            title='Payload',
        ),
    ]


class PadValueContextMessage(BaseModel):
    type: Annotated[Literal['context_message'], Field(title='Type')] = 'context_message'
    role: Annotated[str, Field(title='Role')]
    content: Annotated[list[PadValueContextMessageContentItem], Field(title='Content')]


class RuntimeEventPayloadValue(BaseModel):
    type: Annotated[Literal['value'], Field(title='Type')] = 'value'
    value: Annotated[
        Union[
            PadValueString,
            PadValueInteger,
            PadValueFloat,
            PadValueBoolean,
            PadValueTrigger,
            PadValueAudioClip,
            PadValueVideoClip,
            PadValueList,
            PadValueContextMessage,
        ],
        Field(
            description='Type of the pad triggered value',
            discriminator='type',
            title='Value',
        ),
    ]
    node_id: Annotated[str, Field(title='Node Id')]
    pad_id: Annotated[str, Field(title='Pad Id')]


class Items(
    RootModel[
        Union[
            PadValueString,
            PadValueInteger,
            PadValueFloat,
            PadValueBoolean,
            PadValueTrigger,
            PadValueAudioClip,
            PadValueVideoClip,
            PadValueList,
            PadValueContextMessage,
        ]
    ]
):
    root: Annotated[
        Union[
            PadValueString,
            PadValueInteger,
            PadValueFloat,
            PadValueBoolean,
            PadValueTrigger,
            PadValueAudioClip,
            PadValueVideoClip,
            PadValueList,
            PadValueContextMessage,
        ],
        Field(description='Type of the pad triggered value', discriminator='type'),
    ]


class RuntimeResponsePayloadGetListItems(BaseModel):
    type: Annotated[Literal['get_list_items'], Field(title='Type')] = 'get_list_items'
    items: Annotated[list[Items], Field(title='Items')]


class RuntimeResponsePayloadGetValue(BaseModel):
    type: Annotated[Literal['get_value'], Field(title='Type')] = 'get_value'
    value: Annotated[
        Union[
            PadValueString,
            PadValueInteger,
            PadValueFloat,
            PadValueBoolean,
            PadValueTrigger,
            PadValueAudioClip,
            PadValueVideoClip,
            PadValueList,
            PadValueContextMessage,
        ],
        Field(
            description='Type of the pad triggered value',
            discriminator='type',
            title='Value',
        ),
    ]


class RuntimeEvent(BaseModel):
    type: Annotated[Literal['event'], Field(title='Type')] = 'event'
    payload: Annotated[
        Union[RuntimeEventPayloadValue, RuntimeEventPayloadLogs],
        Field(
            description='Payload for the runtime event',
            discriminator='type',
            title='Payload',
        ),
    ]


class RuntimeResponse(BaseModel):
    type: Annotated[Literal['complete'], Field(title='Type')] = 'complete'
    req_id: Annotated[str, Field(title='Req Id')]
    error: Annotated[Optional[str], Field(title='Error')] = None
    payload: Annotated[
        Optional[
            Union[
                RuntimeResponsePayloadPushValue,
                RuntimeResponsePayloadGetValue,
                RuntimeResponsePayloadGetListItems,
                RuntimeResponsePayloadLockPublisher,
            ]
        ],
        Field(title='Payload'),
    ] = None


class DummyType(BaseModel):
    req: RuntimeRequest
    runtime_request_payload: Annotated[
        Union[
            RuntimeRequestPayloadPushValue,
            RuntimeRequestPayloadGetValue,
            RuntimeRequestPayloadGetListItems,
            RuntimeRequestPayloadLockPublisher,
        ],
        Field(
            description='Request to push data to a pad',
            discriminator='type',
            title='Runtime Request Payload',
        ),
    ]
    resp: RuntimeResponse
    runtime_response_payload: Annotated[
        Union[
            RuntimeResponsePayloadPushValue,
            RuntimeResponsePayloadGetValue,
            RuntimeResponsePayloadGetListItems,
            RuntimeResponsePayloadLockPublisher,
        ],
        Field(
            description='Payload for the runtime request complete',
            discriminator='type',
            title='Runtime Response Payload',
        ),
    ]
    ev: RuntimeEvent
    runtime_event_payload: Annotated[
        Union[RuntimeEventPayloadValue, RuntimeEventPayloadLogs],
        Field(
            description='Payload for the runtime event',
            discriminator='type',
            title='Runtime Event Payload',
        ),
    ]
    pad_value: Annotated[
        Union[
            PadValueString,
            PadValueInteger,
            PadValueFloat,
            PadValueBoolean,
            PadValueTrigger,
            PadValueAudioClip,
            PadValueVideoClip,
            PadValueList,
            PadValueContextMessage,
        ],
        Field(
            description='Type of the pad triggered value',
            discriminator='type',
            title='Pad Value',
        ),
    ]
    log_item: RuntimeEventPayloadLogItem
