# generated by datamodel-codegen:
#   filename:  runtime.json
#   timestamp: 2025-09-08T18:59:16+00:00

from __future__ import annotations

from typing import Any, Literal, Optional, Union

from pydantic import BaseModel, Field


class MCPTransportSSE(BaseModel):
    type: str = Field('sse', const=True, title='Type')
    url: str = Field(..., title='Url')


class PadValueAudioClip(BaseModel):
    type: Literal['audio_clip'] = Field(..., const=True, title='Type')
    transcript: str = Field(..., title='Transcript')
    duration: float = Field(..., title='Duration')


class PadValueBoolean(BaseModel):
    type: Literal['boolean'] = Field(..., const=True, title='Type')
    value: bool = Field(..., title='Value')


class PadValueFloat(BaseModel):
    type: Literal['float'] = Field(..., const=True, title='Type')
    value: float = Field(..., title='Value')


class PadValueInteger(BaseModel):
    type: Literal['integer'] = Field(..., const=True, title='Type')
    value: int = Field(..., title='Value')


class PadValueString(BaseModel):
    type: Literal['string'] = Field(..., const=True, title='Type')
    value: str = Field(..., title='Value')


class PadValueTrigger(BaseModel):
    type: Literal['trigger'] = Field(..., const=True, title='Type')


class PadValueVideoClip(BaseModel):
    type: Literal['video_clip'] = Field(..., const=True, title='Type')
    duration: float = Field(..., title='Duration')


class RuntimeEventPayloadValue(BaseModel):
    type: Literal['value'] = Field(..., const=True, title='Type')
    value: Union[
        PadValueString,
        PadValueInteger,
        PadValueFloat,
        PadValueBoolean,
        PadValueTrigger,
        PadValueAudioClip,
        PadValueVideoClip,
    ] = Field(
        ...,
        description='Type of the pad triggered value',
        discriminator='type',
        title='Value',
    )
    node_id: str = Field(..., title='Node Id')
    pad_id: str = Field(..., title='Pad Id')


class RuntimeRequestPayloadGetValue(BaseModel):
    type: Literal['get_value'] = Field(..., const=True, title='Type')
    node_id: str = Field(..., title='Node Id')
    pad_id: str = Field(..., title='Pad Id')


class RuntimeRequestPayloadListMCPServers(BaseModel):
    type: Literal['list_mcp_servers'] = Field(..., const=True, title='Type')


class RuntimeRequestPayloadLockPublisher(BaseModel):
    type: Literal['lock_publisher'] = Field(..., const=True, title='Type')
    publish_node: str = Field(..., title='Publish Node')


class RuntimeRequestPayloadPushValue(BaseModel):
    type: Literal['push_value'] = Field(..., const=True, title='Type')
    value: Optional[Any] = Field(None, title='Value')
    node_id: str = Field(..., title='Node Id')
    pad_id: str = Field(..., title='Pad Id')


class RuntimeResponsePayloadGetValue(BaseModel):
    type: Literal['get_value'] = Field(..., const=True, title='Type')
    value: Union[
        PadValueString,
        PadValueInteger,
        PadValueFloat,
        PadValueBoolean,
        PadValueTrigger,
        PadValueAudioClip,
        PadValueVideoClip,
    ] = Field(
        ...,
        description='Type of the pad triggered value',
        discriminator='type',
        title='Value',
    )


class RuntimeResponsePayloadLockPublisher(BaseModel):
    type: Literal['lock_publisher'] = Field(..., const=True, title='Type')
    success: bool = Field(..., title='Success')


class RuntimeResponsePayloadPushValue(BaseModel):
    type: Literal['push_value'] = Field(..., const=True, title='Type')


class MCPTransportDatachannelProxy(BaseModel):
    type: Literal['datachannel_proxy'] = Field(..., const=True, title='Type')
    local_transport: MCPTransportSSE


class RuntimeEvent(BaseModel):
    type: str = Field('event', const=True, title='Type')
    payload: RuntimeEventPayloadValue = Field(
        ...,
        description='Payload for the runtime event',
        discriminator='type',
        title='Payload',
    )


class RuntimeRequest(BaseModel):
    type: str = Field('request', const=True, title='Type')
    req_id: str = Field(..., title='Req Id')
    payload: Union[
        RuntimeRequestPayloadPushValue,
        RuntimeRequestPayloadGetValue,
        RuntimeRequestPayloadLockPublisher,
        RuntimeRequestPayloadListMCPServers,
    ] = Field(
        ...,
        description='Request to push data to a pad',
        discriminator='type',
        title='Payload',
    )


class MCPServer(BaseModel):
    name: str = Field(..., title='Name')
    transport: MCPTransportDatachannelProxy = Field(
        ..., discriminator='type', title='Transport'
    )


class RuntimeResponsePayloadListMCPServers(BaseModel):
    type: Literal['list_mcp_servers'] = Field(..., const=True, title='Type')
    servers: list[MCPServer] = Field(..., title='Servers')


class RuntimeResponse(BaseModel):
    type: str = Field('complete', const=True, title='Type')
    req_id: str = Field(..., title='Req Id')
    error: Optional[str] = Field(None, title='Error')
    payload: Optional[
        Union[
            RuntimeResponsePayloadPushValue,
            RuntimeResponsePayloadGetValue,
            RuntimeResponsePayloadLockPublisher,
            RuntimeResponsePayloadListMCPServers,
        ]
    ] = Field(None, title='Payload')


class DummyType(BaseModel):
    req: RuntimeRequest
    runtime_request_payload: Union[
        RuntimeRequestPayloadPushValue,
        RuntimeRequestPayloadGetValue,
        RuntimeRequestPayloadLockPublisher,
        RuntimeRequestPayloadListMCPServers,
    ] = Field(
        ...,
        description='Request to push data to a pad',
        discriminator='type',
        title='Runtime Request Payload',
    )
    resp: RuntimeResponse
    runtime_response_payload: Union[
        RuntimeResponsePayloadPushValue,
        RuntimeResponsePayloadGetValue,
        RuntimeResponsePayloadLockPublisher,
        RuntimeResponsePayloadListMCPServers,
    ] = Field(
        ...,
        description='Payload for the runtime request complete',
        discriminator='type',
        title='Runtime Response Payload',
    )
    ev: RuntimeEvent
    runtime_event_payload: RuntimeEventPayloadValue = Field(
        ...,
        description='Payload for the runtime event',
        discriminator='type',
        title='Runtime Event Payload',
    )
    pad_value: Union[
        PadValueString,
        PadValueInteger,
        PadValueFloat,
        PadValueBoolean,
        PadValueTrigger,
        PadValueAudioClip,
        PadValueVideoClip,
    ] = Field(
        ...,
        description='Type of the pad triggered value',
        discriminator='type',
        title='Pad Value',
    )
