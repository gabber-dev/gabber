/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Type = "request";
export type ReqId = string;
/**
 * Request to push data to a pad
 */
export type Payload =
  | RuntimeRequestPayload_PushValue
  | RuntimeRequestPayload_GetValue
  | RuntimeRequestPayload_LockPublisher
  | RuntimeRequestPayload_ListMCPServers;
export type Type1 = "push_value";
export type NodeId = string;
export type PadId = string;
export type Type2 = "get_value";
export type NodeId1 = string;
export type PadId1 = string;
export type Type3 = "lock_publisher";
export type PublishNode = string;
export type Type4 = "list_mcp_servers";
/**
 * Request to push data to a pad
 */
export type RuntimeRequestPayload =
  | RuntimeRequestPayload_PushValue
  | RuntimeRequestPayload_GetValue
  | RuntimeRequestPayload_LockPublisher
  | RuntimeRequestPayload_ListMCPServers;
export type Type5 = "complete";
export type ReqId1 = string;
export type Error = string | null;
export type Payload1 =
  | (
      | RuntimeResponsePayload_PushValue
      | RuntimeResponsePayload_GetValue
      | RuntimeResponsePayload_LockPublisher
      | RuntimeResponsePayload_ListMCPServers
    )
  | null;
export type Type6 = "push_value";
export type Type7 = "get_value";
/**
 * Type of the pad triggered value
 */
export type Value1 =
  | PadValue_String
  | PadValue_Integer
  | PadValue_Float
  | PadValue_Boolean
  | PadValue_Trigger
  | PadValue_AudioClip
  | PadValue_VideoClip;
export type Type8 = "string";
export type Value2 = string;
export type Type9 = "integer";
export type Value3 = number;
export type Type10 = "float";
export type Value4 = number;
export type Type11 = "boolean";
export type Value5 = boolean;
export type Type12 = "trigger";
export type Type13 = "audio_clip";
export type Transcript = string;
export type Duration = number;
export type Type14 = "video_clip";
export type Duration1 = number;
export type Type15 = "lock_publisher";
export type Success = boolean;
export type Type16 = "list_mcp_servers";
export type Name = string;
export type Transport = MCPTransportDatachannelProxy;
export type Type17 = "datachannel_proxy";
export type Type18 = "sse";
export type Url = string;
export type Servers = MCPServer[];
/**
 * Payload for the runtime request complete
 */
export type RuntimeResponsePayload =
  | RuntimeResponsePayload_PushValue
  | RuntimeResponsePayload_GetValue
  | RuntimeResponsePayload_LockPublisher
  | RuntimeResponsePayload_ListMCPServers;
export type Type19 = "event";
/**
 * Payload for the runtime event
 */
export type Payload2 = RuntimeEventPayload_Value;
export type Type20 = "value";
/**
 * Type of the pad triggered value
 */
export type Value6 =
  | PadValue_String
  | PadValue_Integer
  | PadValue_Float
  | PadValue_Boolean
  | PadValue_Trigger
  | PadValue_AudioClip
  | PadValue_VideoClip;
export type NodeId2 = string;
export type PadId2 = string;
/**
 * Payload for the runtime event
 */
export type RuntimeEventPayload = RuntimeEventPayload_Value;
/**
 * Type of the pad triggered value
 */
export type PadValue =
  | PadValue_String
  | PadValue_Integer
  | PadValue_Float
  | PadValue_Boolean
  | PadValue_Trigger
  | PadValue_AudioClip
  | PadValue_VideoClip;

export interface DummyType {
  req: RuntimeRequest;
  runtime_request_payload: RuntimeRequestPayload;
  resp: RuntimeResponse;
  runtime_response_payload: RuntimeResponsePayload;
  ev: RuntimeEvent;
  runtime_event_payload: RuntimeEventPayload;
  pad_value: PadValue;
  [k: string]: unknown;
}
export interface RuntimeRequest {
  type?: Type;
  req_id: ReqId;
  payload: Payload;
  [k: string]: unknown;
}
export interface RuntimeRequestPayload_PushValue {
  type?: Type1;
  value?: Value;
  node_id: NodeId;
  pad_id: PadId;
  [k: string]: unknown;
}
export interface Value {
  [k: string]: unknown;
}
export interface RuntimeRequestPayload_GetValue {
  type?: Type2;
  node_id: NodeId1;
  pad_id: PadId1;
  [k: string]: unknown;
}
export interface RuntimeRequestPayload_LockPublisher {
  type?: Type3;
  publish_node: PublishNode;
  [k: string]: unknown;
}
export interface RuntimeRequestPayload_ListMCPServers {
  type?: Type4;
  [k: string]: unknown;
}
export interface RuntimeResponse {
  type?: Type5;
  req_id: ReqId1;
  error?: Error;
  payload?: Payload1;
  [k: string]: unknown;
}
export interface RuntimeResponsePayload_PushValue {
  type?: Type6;
  [k: string]: unknown;
}
export interface RuntimeResponsePayload_GetValue {
  type?: Type7;
  value: Value1;
  [k: string]: unknown;
}
export interface PadValue_String {
  type?: Type8;
  value: Value2;
  [k: string]: unknown;
}
export interface PadValue_Integer {
  type?: Type9;
  value: Value3;
  [k: string]: unknown;
}
export interface PadValue_Float {
  type?: Type10;
  value: Value4;
  [k: string]: unknown;
}
export interface PadValue_Boolean {
  type?: Type11;
  value: Value5;
  [k: string]: unknown;
}
export interface PadValue_Trigger {
  type?: Type12;
  [k: string]: unknown;
}
export interface PadValue_AudioClip {
  type?: Type13;
  transcript: Transcript;
  duration: Duration;
  [k: string]: unknown;
}
export interface PadValue_VideoClip {
  type?: Type14;
  duration: Duration1;
  [k: string]: unknown;
}
export interface RuntimeResponsePayload_LockPublisher {
  type?: Type15;
  success: Success;
  [k: string]: unknown;
}
export interface RuntimeResponsePayload_ListMCPServers {
  type?: Type16;
  servers: Servers;
  [k: string]: unknown;
}
export interface MCPServer {
  name: Name;
  transport: Transport;
  [k: string]: unknown;
}
export interface MCPTransportDatachannelProxy {
  type?: Type17;
  local_transport: MCPTransportSSE;
  [k: string]: unknown;
}
export interface MCPTransportSSE {
  type?: Type18;
  url: Url;
  [k: string]: unknown;
}
export interface RuntimeEvent {
  type?: Type19;
  payload: Payload2;
  [k: string]: unknown;
}
export interface RuntimeEventPayload_Value {
  type?: Type20;
  value: Value6;
  node_id: NodeId2;
  pad_id: PadId2;
  [k: string]: unknown;
}
