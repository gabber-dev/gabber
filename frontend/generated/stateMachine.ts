/**
 * Copyright 2025 Fluently AI, Inc. DBA Gabber. All rights reserved.
 * SPDX-License-Identifier: SUL-1.0
 */

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Id = string;
export type Name = string;
export type X = number;
export type Y = number;
export type States = StateMachineState[];
export type Id1 = string;
export type FromState = string;
export type ToState = string;
export type ParameterName = string | null;
export type Operator =
  | (
      | "<"
      | "<="
      | "=="
      | "!="
      | ">="
      | ">"
      | "NON_EMPTY"
      | "EMPTY"
      | "STARTS_WITH"
      | "ENDS_WITH"
      | "CONTAINS"
      | "TRUE"
      | "FALSE"
    )
  | null;
export type Conditions = StateMachineTransitionCondition[];
export type Transitions = StateMachineTransition[];
export type EntryState = string | null;

export interface StateMachineConfiguration {
  states: States;
  transitions: Transitions;
  entry_state?: EntryState;
  entry_node_position?: StateMachineStatePosition | null;
  special_any_state_position?: StateMachineStatePosition | null;
  [k: string]: unknown;
}
export interface StateMachineState {
  id: Id;
  name: Name;
  position: StateMachineStatePosition;
  [k: string]: unknown;
}
export interface StateMachineStatePosition {
  x: X;
  y: Y;
  [k: string]: unknown;
}
export interface StateMachineTransition {
  id: Id1;
  from_state: FromState;
  to_state: ToState;
  conditions?: Conditions;
  [k: string]: unknown;
}
export interface StateMachineTransitionCondition {
  parameter_name?: ParameterName;
  operator?: Operator;
  value?: unknown;
  [k: string]: unknown;
}
