/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Request to perform on the graph editor
 */
export type Request =
  | GetNodeLibraryRequest
  | EditRequest
  | LoadFromSnapshotRequest
  | QueryEligibleNodeLibraryItemsRequest;
export type Type = "get_node_library";
export type ReqId = string;
/**
 * Filter for node types (optional)
 */
export type Filter = string | null;
/**
 * Whether to include metadata in the response
 */
export type IncludeMetadata = boolean;
export type Type1 = "edit";
export type ReqId1 = string;
export type Type2 = "insert_node";
export type Id = string | null;
export type NodeType = string;
/**
 * @minItems 2
 * @maxItems 2
 */
export type EditorPosition = [unknown, unknown];
export type EditorDimensions = [unknown, unknown] | null;
export type EditorName = string;
export type Type3 = "insert_sub_graph";
export type Id1 = string | null;
export type SubgraphId = string;
/**
 * @minItems 2
 * @maxItems 2
 */
export type EditorPosition1 = [unknown, unknown];
export type EditorDimensions1 = [unknown, unknown] | null;
export type EditorName1 = string;
export type Type4 = "update_node";
export type Id2 = string;
export type EditorPosition2 = [unknown, unknown] | null;
export type EditorDimensions2 = [unknown, unknown] | null;
export type EditorName2 = string | null;
export type NewId = string | null;
export type Type5 = "remove_node";
/**
 * ID of the node to remove
 */
export type NodeId = string;
export type Type6 = "connect_pad";
/**
 * ID of the source node
 */
export type Node = string;
/**
 * Handle ID of the source pad
 */
export type Pad = string;
/**
 * ID of the target node
 */
export type ConnectedNode = string;
/**
 * Handle ID of the target pad
 */
export type ConnectedPad = string;
export type Type7 = "disconnect_pad";
/**
 * ID of the source node
 */
export type Node1 = string;
/**
 * Handle ID of the source pad
 */
export type Pad1 = string;
/**
 * ID of the target node
 */
export type ConnectedNode1 = string;
/**
 * Handle ID of the target pad
 */
export type ConnectedPad1 = string;
export type Type8 = "update_pad";
/**
 * ID of the node containing the pad
 */
export type Node2 = string;
/**
 * ID of the pad to update
 */
export type Pad2 = string;
/**
 * New value for the pad
 */
export type Value =
  | String
  | Integer
  | Float
  | Boolean
  | Trigger
  | AudioClip
  | VideoClip
  | List
  | ContextMessageRole
  | ContextMessage
  | Enum
  | Secret
  | NodeReference
  | ToolDefinition
  | Schema
  | Object1
  | null;
export type Type9 = "string";
export type Value1 = string;
export type Type10 = "integer";
export type Value2 = number;
export type Type11 = "float";
export type Value3 = number;
export type Type12 = "boolean";
export type Value4 = boolean;
export type Type13 = "trigger";
export type Type14 = "audio_clip";
export type Transcription = string | null;
export type Duration = number;
export type Type15 = "video_clip";
export type Duration1 = number;
export type FrameCount = number;
export type Type16 = "list";
export type Count = number;
export type Type17 = "context_message_role";
export type ContextMessageRoleEnum = "user" | "assistant" | "system" | "tool";
export type Type18 = "context_message";
export type ContentType = "text" | "image" | "audio" | "video";
export type Text = string | null;
export type Width = number;
export type Height = number;
export type Handle = string;
export type Timestamp = number | null;
export type Duration2 = number;
export type Transcription1 = string | null;
export type Handle1 = string;
export type StartTimestamp = number | null;
export type Width1 = number;
export type Height1 = number;
export type Duration3 = number;
export type Handle2 = string;
export type FrameCount1 = number;
export type StartTimestamp1 = number | null;
export type Content = ContextMessageContentItem[];
export type Type19 = "enum";
export type Value5 = string;
export type Type20 = "secret";
export type SecretId = string;
export type Name = string;
export type Type21 = "node_reference";
export type NodeId1 = string;
export type Type22 = "tool_definition";
export type Name1 = string;
export type Description = string;
export type Type23 = "schema";
export type Type24 = "string";
export type MaxLength = number | null;
export type MinLength = number | null;
export type Type25 = "integer";
export type Maximum = number | null;
export type Minimum = number | null;
export type Type26 = "float";
export type Maximum1 = number | null;
export type Minimum1 = number | null;
export type Type27 = "boolean";
export type Type28 = "object";
export type ObjectSchema = {
  [k: string]: unknown;
} | null;
export type Type29 = "list";
export type MaxLength1 = number | null;
export type ItemTypeConstraints = BasePadType[] | null;
export type Required = string[] | null;
export type Defaults = {
  [k: string]: unknown;
} | null;
export type Type30 = "object";
export type Items = (
  | String
  | Integer
  | Float
  | Boolean
  | Trigger
  | AudioClip
  | VideoClip
  | List
  | ContextMessageRole
  | ContextMessage
  | Enum
  | Secret
  | NodeReference
  | ToolDefinition
  | Schema
  | Object1
  | null
)[];
export type Type31 = "create_portal";
export type SourceNode = string;
export type SourcePad = string;
/**
 * @minItems 2
 * @maxItems 2
 */
export type EditorPosition3 = [unknown, unknown];
export type Type32 = "create_portal_end";
export type PortalId = string;
/**
 * @minItems 2
 * @maxItems 2
 */
export type EditorPosition4 = [unknown, unknown];
export type Type33 = "delete_portal";
export type PortalId1 = string;
export type Type34 = "delete_portal_end";
export type PortalId2 = string;
export type PortalEndId = string;
export type Type35 = "update_portal";
export type PortalId3 = string;
/**
 * @minItems 2
 * @maxItems 2
 */
export type EditorPosition5 = [unknown, unknown];
export type Type36 = "update_portal_end";
export type PortalId4 = string;
export type PortalEndId1 = string;
/**
 * @minItems 2
 * @maxItems 2
 */
export type EditorPosition6 = [unknown, unknown];
export type Node3 = string;
export type Pad3 = string;
export type NextPads = PadReference[];
/**
 * Edit requests to perform on the graph editor
 */
export type Edits = (
  | InsertNodeEdit
  | InsertSubGraphEdit
  | UpdateNodeEdit
  | RemoveNodeEdit
  | ConnectPadEdit
  | DisconnectPadEdit
  | UpdatePadEdit
  | CreatePortalEdit
  | CreatePortalEndEdit
  | DeletePortalEdit
  | DeletePortalEndEdit
  | UpdatePortalEdit
  | UpdatePortalEndEdit
)[];
export type Type37 = "load_from_snapshot";
export type Id3 = string;
export type Type38 = string;
export type EditorName3 = string;
/**
 * @minItems 2
 * @maxItems 2
 */
export type EditorPosition7 = [unknown, unknown];
export type EditorDimensions3 = [unknown, unknown] | null;
export type Id4 = string;
export type Group = string;
export type Type39 = string;
export type DefaultAllowedTypes =
  | (
      | String1
      | Integer1
      | Float1
      | Boolean1
      | Enum1
      | Secret1
      | BoundingBox
      | Point
      | Audio
      | Video
      | Trigger
      | AudioClip1
      | VideoClip1
      | AVClip
      | TextStream
      | ContextMessage1
      | ContextMessageRole1
      | List1
      | Schema1
      | Object
      | NodeReference1
    )[]
  | null;
export type Type40 = "enum";
export type Options = string[] | null;
export type Type41 = "secret";
export type UpdatedAt = string;
export type CreatedAt = string;
export type Id5 = string;
export type Name2 = string;
export type Options1 = PublicSecret[];
export type Type42 = "bounding_box";
export type Type43 = "point";
export type Type44 = "audio";
export type Type45 = "video";
export type Type46 = "audio_clip";
export type Type47 = "video_clip";
export type Type48 = "av_clip";
export type Type49 = "text_stream";
export type Type50 = "context_message";
export type Type51 = "context_message_role";
export type Type52 = "schema";
export type Type53 = "node_reference";
export type NodeTypes = string[];
export type AllowedTypes =
  | (
      | String1
      | Integer1
      | Float1
      | Boolean1
      | Enum1
      | Secret1
      | BoundingBox
      | Point
      | Audio
      | Video
      | Trigger
      | AudioClip1
      | VideoClip1
      | AVClip
      | TextStream
      | ContextMessage1
      | ContextMessageRole1
      | List1
      | Schema1
      | Object
      | NodeReference1
    )[]
  | null;
export type NextPads1 = PadReference[];
export type PadLinks = string[];
export type Pads = PadEditorRepresentation[];
export type Description1 = string | null;
export type Primary = string;
export type Secondary = string;
export type Tags = string[];
export type Notes = NodeNote[] | null;
export type Level = "info" | "warning" | "error";
export type Message = string;
export type Pad4 = string | null;
export type Recommendations = NodeNoteRecommendation[] | null;
export type Message1 = string;
export type Edits1 =
  | (
      | InsertNodeEdit
      | InsertSubGraphEdit
      | UpdateNodeEdit
      | RemoveNodeEdit
      | ConnectPadEdit
      | DisconnectPadEdit
      | UpdatePadEdit
      | CreatePortalEdit
      | CreatePortalEndEdit
      | DeletePortalEdit
      | DeletePortalEndEdit
      | UpdatePortalEdit
      | UpdatePortalEndEdit
    )[]
  | null;
export type Nodes = NodeEditorRepresentation[];
export type Portals = Portal[] | null;
export type Id6 = string;
export type Name3 = string;
export type SourceNode1 = string;
export type SourcePad1 = string;
/**
 * @minItems 2
 * @maxItems 2
 */
export type EditorPosition8 = [unknown, unknown];
export type Id7 = string;
/**
 * @minItems 2
 * @maxItems 2
 */
export type EditorPosition9 = [unknown, unknown];
export type NextPads2 = PadReference[];
export type Ends = PortalEnd[];
export type ReqId2 = string;
export type Type54 = "query_eligible_node_library_items";
export type ReqId3 = string;
export type SourceNode2 = string;
export type SourcePad2 = string;
/**
 * Response from the graph editor
 */
export type Response =
  | EditResponse
  | LoadFromSnapshotResponse
  | NodeLibraryResponse
  | QueryEligibleNodeLibraryItemsResponse;
export type Type55 = "edit";
export type ReqId4 = string;
export type Type56 = "load_from_snapshot";
export type ReqId5 = string;
export type Type57 = "node_library";
export type ReqId6 = string;
export type Type58 = "node";
/**
 * Name of the node
 */
export type Name4 = string;
/**
 * Human-readable description of what the node does
 */
export type Description2 = string;
export type Type59 = "subgraph";
/**
 * ID of the subgraph
 */
export type Id8 = string;
/**
 * Name of the subgraph
 */
export type Name5 = string;
/**
 * Whether the subgraph can be edited in the editor
 */
export type Editable = boolean;
/**
 * List of available nodes in the library
 */
export type NodeLibrary = (GraphLibraryItem_Node | GraphLibraryItem_SubGraph)[];
export type Type60 = "query_eligible_node_library_items";
export type ReqId7 = string;
/**
 * Type of graph library item
 */
export type LibraryItem = GraphLibraryItem_Node | GraphLibraryItem_SubGraph;
export type Pads1 = PadEditorRepresentation[];
/**
 * List of eligible items from the node library
 */
export type DirectEligibleItems = EligibleLibraryItem[];
/**
 * List of autoconvert eligible items from the node library
 */
export type AutoconvertEligibleItems = (GraphLibraryItem_Node | GraphLibraryItem_SubGraph)[];
/**
 * Type of edit to perform on the graph editor
 */
export type Edit =
  | InsertNodeEdit
  | InsertSubGraphEdit
  | UpdateNodeEdit
  | RemoveNodeEdit
  | ConnectPadEdit
  | DisconnectPadEdit
  | UpdatePadEdit
  | CreatePortalEdit
  | CreatePortalEndEdit
  | DeletePortalEdit
  | DeletePortalEndEdit
  | UpdatePortalEdit
  | UpdatePortalEndEdit;
export type PadConstraint =
  | String1
  | Integer1
  | Float1
  | Boolean1
  | Enum1
  | Secret1
  | BoundingBox
  | Point
  | Audio
  | Video
  | Trigger
  | AudioClip1
  | VideoClip1
  | AVClip
  | TextStream
  | ContextMessage1
  | ContextMessageRole1
  | List1
  | Schema1
  | Object
  | NodeReference1;
export type PadValue =
  | (
      | String
      | Integer
      | Float
      | Boolean
      | Trigger
      | AudioClip
      | VideoClip
      | List
      | ContextMessageRole
      | ContextMessage
      | Enum
      | Secret
      | NodeReference
      | ToolDefinition
      | Schema
      | Object1
    )
  | null;
/**
 * Type of graph library item
 */
export type GraphLibraryItem = GraphLibraryItem_Node | GraphLibraryItem_SubGraph;

export interface DummyModel {
  request: Request;
  response: Response;
  edit: Edit;
  pad_constraint: PadConstraint;
  pad_value: PadValue;
  graph_library_item: GraphLibraryItem;
  graph_library_item_node: GraphLibraryItem_Node;
  graph_library_item_subgraph: GraphLibraryItem_SubGraph;
  [k: string]: unknown;
}
export interface GetNodeLibraryRequest {
  type?: Type;
  req_id: ReqId;
  filter?: Filter;
  include_metadata?: IncludeMetadata;
  [k: string]: unknown;
}
export interface EditRequest {
  type?: Type1;
  req_id: ReqId1;
  edits?: Edits;
  [k: string]: unknown;
}
export interface InsertNodeEdit {
  type?: Type2;
  id?: Id;
  node_type: NodeType;
  editor_position: EditorPosition;
  editor_dimensions?: EditorDimensions;
  editor_name: EditorName;
  [k: string]: unknown;
}
export interface InsertSubGraphEdit {
  type?: Type3;
  id?: Id1;
  subgraph_id: SubgraphId;
  editor_position: EditorPosition1;
  editor_dimensions?: EditorDimensions1;
  editor_name: EditorName1;
  [k: string]: unknown;
}
export interface UpdateNodeEdit {
  type?: Type4;
  id: Id2;
  editor_position: EditorPosition2;
  editor_dimensions: EditorDimensions2;
  editor_name: EditorName2;
  new_id?: NewId;
  [k: string]: unknown;
}
export interface RemoveNodeEdit {
  type?: Type5;
  node_id: NodeId;
  [k: string]: unknown;
}
export interface ConnectPadEdit {
  type?: Type6;
  node: Node;
  pad: Pad;
  connected_node: ConnectedNode;
  connected_pad: ConnectedPad;
  [k: string]: unknown;
}
export interface DisconnectPadEdit {
  type?: Type7;
  node: Node1;
  pad: Pad1;
  connected_node: ConnectedNode1;
  connected_pad: ConnectedPad1;
  [k: string]: unknown;
}
export interface UpdatePadEdit {
  type?: Type8;
  node: Node2;
  pad: Pad2;
  value: Value;
  [k: string]: unknown;
}
export interface String {
  type?: Type9;
  value: Value1;
  [k: string]: unknown;
}
export interface Integer {
  type?: Type10;
  value: Value2;
  [k: string]: unknown;
}
export interface Float {
  type?: Type11;
  value: Value3;
  [k: string]: unknown;
}
export interface Boolean {
  type?: Type12;
  value: Value4;
  [k: string]: unknown;
}
export interface Trigger {
  type?: Type13;
  [k: string]: unknown;
}
export interface AudioClip {
  type?: Type14;
  transcription: Transcription;
  duration: Duration;
  [k: string]: unknown;
}
export interface VideoClip {
  type?: Type15;
  duration: Duration1;
  frame_count: FrameCount;
  [k: string]: unknown;
}
export interface List {
  type?: Type16;
  count: Count;
  items: Items;
  [k: string]: unknown;
}
export interface ContextMessageRole {
  type?: Type17;
  value: ContextMessageRoleEnum;
  [k: string]: unknown;
}
export interface ContextMessage {
  type?: Type18;
  role: ContextMessageRole;
  content: Content;
  [k: string]: unknown;
}
export interface ContextMessageContentItem {
  content_type: ContentType;
  text?: Text;
  image?: ContextMessageContentItem_Image | null;
  audio?: ContextMessageContentItem_Audio | null;
  video?: ContextMessageContentItem_Video | null;
  [k: string]: unknown;
}
export interface ContextMessageContentItem_Image {
  width: Width;
  height: Height;
  handle: Handle;
  timestamp: Timestamp;
  [k: string]: unknown;
}
export interface ContextMessageContentItem_Audio {
  duration: Duration2;
  transcription: Transcription1;
  handle: Handle1;
  start_timestamp: StartTimestamp;
  [k: string]: unknown;
}
export interface ContextMessageContentItem_Video {
  width: Width1;
  height: Height1;
  duration: Duration3;
  handle: Handle2;
  frame_count: FrameCount1;
  start_timestamp: StartTimestamp1;
  [k: string]: unknown;
}
export interface Enum {
  type?: Type19;
  value: Value5;
  [k: string]: unknown;
}
export interface Secret {
  type?: Type20;
  secret_id: SecretId;
  name: Name;
  [k: string]: unknown;
}
export interface NodeReference {
  type?: Type21;
  node_id: NodeId1;
  [k: string]: unknown;
}
export interface ToolDefinition {
  type?: Type22;
  name: Name1;
  description: Description;
  parameters?: Schema | null;
  [k: string]: unknown;
}
export interface Schema {
  type?: Type23;
  properties: Properties;
  required?: Required;
  defaults?: Defaults;
  [k: string]: unknown;
}
export interface Properties {
  [k: string]: String1 | Integer1 | Float1 | Boolean1 | Object | List1;
}
export interface String1 {
  type?: Type24;
  max_length?: MaxLength;
  min_length?: MinLength;
  [k: string]: unknown;
}
export interface Integer1 {
  type?: Type25;
  maximum?: Maximum;
  minimum?: Minimum;
  [k: string]: unknown;
}
export interface Float1 {
  type?: Type26;
  maximum?: Maximum1;
  minimum?: Minimum1;
  [k: string]: unknown;
}
export interface Boolean1 {
  type?: Type27;
  [k: string]: unknown;
}
export interface Object {
  type?: Type28;
  object_schema?: ObjectSchema;
  [k: string]: unknown;
}
export interface List1 {
  type?: Type29;
  max_length?: MaxLength1;
  item_type_constraints: ItemTypeConstraints;
  [k: string]: unknown;
}
export interface BasePadType {
  [k: string]: unknown;
}
export interface Object1 {
  type?: Type30;
  value: Value6;
  [k: string]: unknown;
}
export interface Value6 {
  [k: string]: unknown;
}
export interface CreatePortalEdit {
  type?: Type31;
  source_node: SourceNode;
  source_pad: SourcePad;
  editor_position: EditorPosition3;
  [k: string]: unknown;
}
export interface CreatePortalEndEdit {
  type?: Type32;
  portal_id: PortalId;
  editor_position: EditorPosition4;
  [k: string]: unknown;
}
export interface DeletePortalEdit {
  type?: Type33;
  portal_id: PortalId1;
  [k: string]: unknown;
}
export interface DeletePortalEndEdit {
  type?: Type34;
  portal_id: PortalId2;
  portal_end_id: PortalEndId;
  [k: string]: unknown;
}
export interface UpdatePortalEdit {
  type?: Type35;
  portal_id: PortalId3;
  editor_position: EditorPosition5;
  [k: string]: unknown;
}
export interface UpdatePortalEndEdit {
  type?: Type36;
  portal_id: PortalId4;
  portal_end_id: PortalEndId1;
  editor_position: EditorPosition6;
  next_pads: NextPads;
  [k: string]: unknown;
}
export interface PadReference {
  node: Node3;
  pad: Pad3;
  [k: string]: unknown;
}
export interface LoadFromSnapshotRequest {
  type?: Type37;
  graph: GraphEditorRepresentation;
  req_id: ReqId2;
  [k: string]: unknown;
}
export interface GraphEditorRepresentation {
  nodes: Nodes;
  portals?: Portals;
  [k: string]: unknown;
}
export interface NodeEditorRepresentation {
  id: Id3;
  type: Type38;
  editor_name: EditorName3;
  editor_position: EditorPosition7;
  editor_dimensions?: EditorDimensions3;
  pads: Pads;
  description?: Description1;
  metadata: NodeMetadata;
  notes?: Notes;
  [k: string]: unknown;
}
export interface PadEditorRepresentation {
  id: Id4;
  group: Group;
  type: Type39;
  default_allowed_types?: DefaultAllowedTypes;
  allowed_types?: AllowedTypes;
  value?: unknown;
  next_pads: NextPads1;
  previous_pad?: PadReference | null;
  pad_links?: PadLinks;
  [k: string]: unknown;
}
export interface Enum1 {
  type?: Type40;
  options?: Options;
  [k: string]: unknown;
}
export interface Secret1 {
  type?: Type41;
  options?: Options1;
  [k: string]: unknown;
}
export interface PublicSecret {
  updated_at: UpdatedAt;
  created_at: CreatedAt;
  id: Id5;
  name: Name2;
  [k: string]: unknown;
}
export interface BoundingBox {
  type?: Type42;
  [k: string]: unknown;
}
export interface Point {
  type?: Type43;
  [k: string]: unknown;
}
export interface Audio {
  type?: Type44;
  [k: string]: unknown;
}
export interface Video {
  type?: Type45;
  [k: string]: unknown;
}
export interface AudioClip1 {
  type?: Type46;
  [k: string]: unknown;
}
export interface VideoClip1 {
  type?: Type47;
  [k: string]: unknown;
}
export interface AVClip {
  type?: Type48;
  [k: string]: unknown;
}
export interface TextStream {
  type?: Type49;
  [k: string]: unknown;
}
export interface ContextMessage1 {
  type?: Type50;
  [k: string]: unknown;
}
export interface ContextMessageRole1 {
  type?: Type51;
  [k: string]: unknown;
}
export interface Schema1 {
  type?: Type52;
  [k: string]: unknown;
}
export interface NodeReference1 {
  type?: Type53;
  node_types: NodeTypes;
  [k: string]: unknown;
}
export interface NodeMetadata {
  primary: Primary;
  secondary: Secondary;
  tags?: Tags;
  [k: string]: unknown;
}
export interface NodeNote {
  level: Level;
  message: Message;
  pad?: Pad4;
  recommendations?: Recommendations;
  [k: string]: unknown;
}
export interface NodeNoteRecommendation {
  message: Message1;
  edits?: Edits1;
  [k: string]: unknown;
}
export interface Portal {
  id: Id6;
  name: Name3;
  source_node: SourceNode1;
  source_pad: SourcePad1;
  editor_position: EditorPosition8;
  ends?: Ends;
  [k: string]: unknown;
}
export interface PortalEnd {
  id: Id7;
  editor_position: EditorPosition9;
  next_pads: NextPads2;
  [k: string]: unknown;
}
export interface QueryEligibleNodeLibraryItemsRequest {
  type?: Type54;
  req_id: ReqId3;
  source_node: SourceNode2;
  source_pad: SourcePad2;
  [k: string]: unknown;
}
export interface EditResponse {
  type?: Type55;
  req_id: ReqId4;
  graph: GraphEditorRepresentation1;
  [k: string]: unknown;
}
/**
 * Full graph representation including all nodes and their connections
 */
export interface GraphEditorRepresentation1 {
  nodes: Nodes;
  portals?: Portals;
  [k: string]: unknown;
}
export interface LoadFromSnapshotResponse {
  type?: Type56;
  req_id: ReqId5;
  graph: GraphEditorRepresentation2;
  [k: string]: unknown;
}
/**
 * Full graph representation including all nodes and their connections
 */
export interface GraphEditorRepresentation2 {
  nodes: Nodes;
  portals?: Portals;
  [k: string]: unknown;
}
export interface NodeLibraryResponse {
  type?: Type57;
  req_id: ReqId6;
  node_library?: NodeLibrary;
  [k: string]: unknown;
}
export interface GraphLibraryItem_Node {
  type?: Type58;
  name: Name4;
  node_type: NodeType1;
  description: Description2;
  metadata: NodeMetadata1;
  [k: string]: unknown;
}
/**
 * Class of the node
 */
export interface NodeType1 {
  [k: string]: unknown;
}
/**
 * Metadata for categorizing and filtering nodes
 */
export interface NodeMetadata1 {
  primary: Primary;
  secondary: Secondary;
  tags?: Tags;
  [k: string]: unknown;
}
export interface GraphLibraryItem_SubGraph {
  type?: Type59;
  id: Id8;
  name: Name5;
  graph: GraphEditorRepresentation3;
  editable?: Editable;
  [k: string]: unknown;
}
/**
 * Graph representation of the subgraph
 */
export interface GraphEditorRepresentation3 {
  nodes: Nodes;
  portals?: Portals;
  [k: string]: unknown;
}
export interface QueryEligibleNodeLibraryItemsResponse {
  type?: Type60;
  req_id: ReqId7;
  direct_eligible_items?: DirectEligibleItems;
  autoconvert_eligible_items?: AutoconvertEligibleItems;
  [k: string]: unknown;
}
export interface EligibleLibraryItem {
  library_item: LibraryItem;
  pads: Pads1;
  [k: string]: unknown;
}
