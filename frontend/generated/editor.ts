/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Request to perform on the graph editor
 */
export type Request = GetNodeLibraryRequest | EditRequest | LoadFromSnapshotRequest;
export type Type = "get_node_library";
/**
 * Filter for node types (optional)
 */
export type Filter = string | null;
/**
 * Whether to include metadata in the response
 */
export type IncludeMetadata = boolean;
export type Type1 = "edit";
/**
 * Edit request to perform on the graph editor
 */
export type Edit =
  | InsertNodeEdit
  | InsertSubGraphEdit
  | UpdateNodeEdit
  | RemoveNodeEdit
  | ConnectPadEdit
  | DisconnectPadEdit
  | UpdatePadEdit;
export type Type2 = "insert_node";
export type Id = string | null;
export type NodeType = string;
/**
 * @minItems 2
 * @maxItems 2
 */
export type EditorPosition = [unknown, unknown];
export type EditorDimensions = [unknown, unknown] | null;
export type EditorName = string;
export type Type3 = "insert_sub_graph";
export type Id1 = string | null;
export type SubgraphId = string;
/**
 * @minItems 2
 * @maxItems 2
 */
export type EditorPosition1 = [unknown, unknown];
export type EditorDimensions1 = [unknown, unknown] | null;
export type EditorName1 = string;
export type Type4 = "update_node";
export type Id2 = string;
export type EditorPosition2 = [unknown, unknown] | null;
export type EditorDimensions2 = [unknown, unknown] | null;
export type EditorName2 = string | null;
export type NewId = string | null;
export type Type5 = "remove_node";
/**
 * ID of the node to remove
 */
export type NodeId = string;
export type Type6 = "connect_pad";
/**
 * ID of the source node
 */
export type Node = string;
/**
 * Handle ID of the source pad
 */
export type Pad = string;
/**
 * ID of the target node
 */
export type ConnectedNode = string;
/**
 * Handle ID of the target pad
 */
export type ConnectedPad = string;
export type Type7 = "disconnect_pad";
/**
 * ID of the source node
 */
export type Node1 = string;
/**
 * Handle ID of the source pad
 */
export type Pad1 = string;
/**
 * ID of the target node
 */
export type ConnectedNode1 = string;
/**
 * Handle ID of the target pad
 */
export type ConnectedPad1 = string;
export type Type8 = "update_pad";
/**
 * ID of the node containing the pad
 */
export type Node2 = string;
/**
 * ID of the pad to update
 */
export type Pad2 = string;
export type Type9 = "load_from_snapshot";
export type Id3 = string;
export type Type10 = string;
export type EditorName3 = string;
/**
 * @minItems 2
 * @maxItems 2
 */
export type EditorPosition3 = [unknown, unknown];
export type EditorDimensions3 = [unknown, unknown] | null;
export type Id4 = string;
export type Group = string;
export type Type11 = string;
export type Node3 = string;
export type Pad3 = string;
export type NextPads = PadReference[];
export type AllowedTypes = BasePadType[] | null;
export type Pads = PadEditorRepresentation[];
export type Description = string | null;
export type Primary = string;
export type Secondary = string;
export type Tags = string[];
export type Nodes = NodeEditorRepresentation[];
/**
 * Change to apply to the graph editor
 */
export type Response1 = FullGraphResponse | NodeLibraryResponse;
export type Type12 = "full_graph";
export type Type13 = "node_library";
export type Type14 = "node";
/**
 * Name of the node
 */
export type Name = string;
/**
 * Human-readable description of what the node does
 */
export type Description1 = string;
export type Type15 = "subgraph";
/**
 * ID of the subgraph
 */
export type Id5 = string;
/**
 * Name of the subgraph
 */
export type Name1 = string;
/**
 * Whether the subgraph can be edited in the editor
 */
export type Editable = boolean;
/**
 * List of available nodes in the library
 */
export type NodeLibrary = (GraphLibraryItem_Node | GraphLibraryItem_SubGraph)[];

export interface GetNodeLibraryRequest {
  type?: Type;
  filter?: Filter;
  include_metadata?: IncludeMetadata;
  [k: string]: unknown;
}
export interface EditRequest {
  type?: Type1;
  edit: Edit;
  [k: string]: unknown;
}
export interface InsertNodeEdit {
  type?: Type2;
  id?: Id;
  node_type: NodeType;
  editor_position: EditorPosition;
  editor_dimensions?: EditorDimensions;
  editor_name: EditorName;
  [k: string]: unknown;
}
export interface InsertSubGraphEdit {
  type?: Type3;
  id?: Id1;
  subgraph_id: SubgraphId;
  editor_position: EditorPosition1;
  editor_dimensions?: EditorDimensions1;
  editor_name: EditorName1;
  [k: string]: unknown;
}
export interface UpdateNodeEdit {
  type?: Type4;
  id: Id2;
  editor_position: EditorPosition2;
  editor_dimensions: EditorDimensions2;
  editor_name: EditorName2;
  new_id?: NewId;
  [k: string]: unknown;
}
export interface RemoveNodeEdit {
  type?: Type5;
  node_id: NodeId;
  [k: string]: unknown;
}
export interface ConnectPadEdit {
  type?: Type6;
  node: Node;
  pad: Pad;
  connected_node: ConnectedNode;
  connected_pad: ConnectedPad;
  [k: string]: unknown;
}
export interface DisconnectPadEdit {
  type?: Type7;
  node: Node1;
  pad: Pad1;
  connected_node: ConnectedNode1;
  connected_pad: ConnectedPad1;
  [k: string]: unknown;
}
export interface UpdatePadEdit {
  type?: Type8;
  node: Node2;
  pad: Pad2;
  value: Value;
  [k: string]: unknown;
}
/**
 * New value for the pad
 */
export interface Value {
  [k: string]: unknown;
}
export interface LoadFromSnapshotRequest {
  type?: Type9;
  graph: GraphEditorRepresentation;
  [k: string]: unknown;
}
export interface GraphEditorRepresentation {
  nodes: Nodes;
  [k: string]: unknown;
}
export interface NodeEditorRepresentation {
  id: Id3;
  type: Type10;
  editor_name: EditorName3;
  editor_position: EditorPosition3;
  editor_dimensions?: EditorDimensions3;
  pads: Pads;
  description?: Description;
  metadata: NodeMetadata;
  [k: string]: unknown;
}
export interface PadEditorRepresentation {
  id: Id4;
  group: Group;
  type: Type11;
  value?: unknown;
  next_pads: NextPads;
  previous_pad?: PadReference | null;
  allowed_types?: AllowedTypes;
  [k: string]: unknown;
}
export interface PadReference {
  node: Node3;
  pad: Pad3;
  [k: string]: unknown;
}
export interface BasePadType {
  [k: string]: unknown;
}
export interface NodeMetadata {
  primary: Primary;
  secondary: Secondary;
  tags?: Tags;
  [k: string]: unknown;
}
export interface Response {
  response: Response1;
  [k: string]: unknown;
}
export interface FullGraphResponse {
  type?: Type12;
  graph: GraphEditorRepresentation1;
  [k: string]: unknown;
}
/**
 * Full graph representation including all nodes and their connections
 */
export interface GraphEditorRepresentation1 {
  nodes: Nodes;
  [k: string]: unknown;
}
export interface NodeLibraryResponse {
  type?: Type13;
  node_library?: NodeLibrary;
  [k: string]: unknown;
}
export interface GraphLibraryItem_Node {
  type?: Type14;
  name: Name;
  node_type: NodeType1;
  description: Description1;
  metadata: NodeMetadata1;
  [k: string]: unknown;
}
/**
 * Class of the node
 */
export interface NodeType1 {
  [k: string]: unknown;
}
/**
 * Metadata for categorizing and filtering nodes
 */
export interface NodeMetadata1 {
  primary: Primary;
  secondary: Secondary;
  tags?: Tags;
  [k: string]: unknown;
}
export interface GraphLibraryItem_SubGraph {
  type?: Type15;
  id: Id5;
  name: Name1;
  graph: GraphEditorRepresentation2;
  editable?: Editable;
  [k: string]: unknown;
}
/**
 * Graph representation of the subgraph
 */
export interface GraphEditorRepresentation2 {
  nodes: Nodes;
  [k: string]: unknown;
}
